version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "9092" ]
      interval: 10s
      retries: 5
      start_period: 20s

  postgres:
    image: postgres:15
    container_name: camel_postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: camel_db
      POSTGRES_USER: camel_user
      POSTGRES_PASSWORD: camel_pass
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "camel_user", "-d", "camel_db" ]
      interval: 10s
      retries: 5
      start_period: 20s

  consumer-service:
    container_name: consumer-service
    build:
      context: ./consumer-service/consumer-service
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/camel_db
      SPRING_DATASOURCE_USERNAME: camel_user
      SPRING_DATASOURCE_PASSWORD: camel_pass
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092

  producer-service:
    container_name: producer-service
    build:
      context: ./producer-service/producer-service
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/camel_db
      SPRING_DATASOURCE_USERNAME: camel_user
      SPRING_DATASOURCE_PASSWORD: camel_pass
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092

volumes:
  pgdata:
